{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = '';\nvar date = '';\nvar count = 0; // Core elements provided by NOAA (-snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\nvar body = null; // searchStation will retrieve the station id from the API and then display that data to the user\n\nfunction searchStation() {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID\n    }\n  }).then(async res => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\") {\n      await res.data.forEach(line => {\n        line = line.split(\",\"); // Find all core values for the station\n\n        if (line[2] == \"PRCP\") {\n          PRCP += parseInt(line[3]);\n        } else if (line[2] == \"SNOW\") {\n          SNOW += parseInt(line[3]);\n        } else if (line[2] == \"TMAX\") {\n          if (TMAX == null) {\n            TMAX = parseInt(line[3]);\n          } else if (parseInt(line[3]) > TMAX) {\n            TMAX = parseInt(line[3]);\n          }\n        } else if (line[2] == \"TMIN\") {\n          if (TMIN == null) {\n            TMIN = parseInt(line[3]);\n          } else if (parseInt(line[3]) < TMIN) {\n            TMIN = parseInt(line[3]);\n          }\n        }\n      }); // Change the body of the page\n\n      body = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Highest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lowest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, received, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n    } else {\n      window.alert(\"No station was found with this ID\");\n    }\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState({\n    received: received\n  });\n  console.log(received);\n  console.log(state); // SOMETHING ABOUT RUNNING THIS IS MAKING IT NOT UPDATE\n\n  if (body === null) {\n    console.log(\"Changing\");\n    body = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          stationID = e.target.value;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          searchStation();\n          received = true;\n          setState({\n            received: received\n          });\n        },\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, count, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n  return body;\n}\n\n_s(App, \"BaWuHOwtr5Zo9ac4Yyawlw+REjw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","useState","axios","stationID","date","count","PRCP","SNOW","TMAX","TMIN","received","body","searchStation","get","params","then","res","data","forEach","line","split","parseInt","window","alert","App","state","setState","console","log","e","target","value"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\nvar date = '';\nvar count = 0;\n\n// Core elements provided by NOAA (-snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\nvar body = null;\n\n// searchStation will retrieve the station id from the API and then display that data to the user\nfunction searchStation() {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID\n    }\n  }).then(async (res) => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\")\n    {\n      await res.data.forEach((line) => {\n        line = line.split(\",\");\n        // Find all core values for the station\n        if (line[2] == \"PRCP\")\n        {\n          PRCP += parseInt(line[3]);\n        }\n        else if (line[2] == \"SNOW\")\n        {\n          SNOW += parseInt(line[3]);\n        }\n        else if (line[2] == \"TMAX\")\n        {\n          if (TMAX == null)\n          {\n            TMAX = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) > TMAX)\n          {\n            TMAX = parseInt(line[3])\n          }\n        }\n        else if (line[2] == \"TMIN\")\n        {\n          if (TMIN == null)\n          {\n            TMIN = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) < TMIN)\n          {\n            TMIN = parseInt(line[3])\n          }\n        }\n      }); \n      // Change the body of the page\n      body = (\n        <div className=\"App\" key={received}>\n          <p>Highest Temperature:</p>\n          <p>Lowest Temperature:</p>\n        </div>\n      );\n    }\n    else\n    {\n      window.alert(\"No station was found with this ID\")\n    }\n  });\n}\n\nfunction App() {\n\n  const [state, setState] = useState({received: received});\n  console.log(received)\n  console.log(state)\n\n  // SOMETHING ABOUT RUNNING THIS IS MAKING IT NOT UPDATE\n  if (body === null)\n  {\n    console.log(\"Changing\")\n    body = (\n      <div className=\"App\" key={count}>\n        <input onChange={(e) => {stationID = e.target.value}}></input>\n        <button onClick={() => {searchStation(); received = true; setState({received: received})}}>Search</button>\n      </div>\n    );\n  }\n\n  return body;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}