{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport line from './Components/line';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.stationID = \"\";\n    this.currentStation = \"\";\n    this.date = \"20170101\";\n    this.data = null;\n    this.list = null; // Individual date data\n    // Core elements provided by NOAA (-snowdepth)\n\n    this.PRCP = 0; // Total precipitation (mm/10)\n\n    this.SNOW = 0; // Total snowfall (mm)\n\n    this.TMAX = null; // Highest temperature\n\n    this.TMIN = null; // Lowests temperature\n\n    this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          this.stationID = e.target.value;\n        },\n        placeholder: \"Station ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.searchStation(),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, \"search\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n\n  loadDate() {\n    if (this.data !== null) {\n      var tempData = [];\n      this.data.forEach(line => {\n        line = line.split(\",\");\n\n        if (line[1] === this.date) {\n          tempData.push(line);\n        }\n      });\n      this.list = tempData.map(line => /*#__PURE__*/_jsxDEV(\"line\", {\n        data: line\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this));\n    }\n  } // searchStation will retrieve the station id from the API and then display that data to the user\n\n\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async res => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\") {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null; // Set current station value\n\n        this.currentStation = this.stationID;\n        this.data = res.data;\n        await this.data.forEach(line => {\n          line = line.split(\",\"); // Find all core values for the station\n\n          if (line[2] == \"PRCP\") {\n            this.PRCP += parseInt(line[3]);\n          } else if (line[2] == \"SNOW\") {\n            this.SNOW += parseInt(line[3]);\n          } else if (line[2] == \"TMAX\") {\n            if (this.TMAX == null) {\n              this.TMAX = parseInt(line[3]);\n            } else if (parseInt(line[3]) > this.TMAX) {\n              this.TMAX = parseInt(line[3]);\n            }\n          } else if (line[2] == \"TMIN\") {\n            if (this.TMIN == null) {\n              this.TMIN = parseInt(line[3]);\n            } else if (parseInt(line[3]) < this.TMIN) {\n              this.TMIN = parseInt(line[3]);\n            }\n          }\n        }); // Change the body of the page\n\n        this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => {\n              this.stationID = e.target.value;\n            },\n            placeholder: \"Station ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.searchStation(),\n            children: \"Search New Station\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Station \", this.currentStation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Highest Temperature: \", this.TMAX]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Lowest Temperature: \", this.TMIN]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total precipitation: \", this.PRCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Snowfall: \", this.SNOW]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            defaultValue: \"2017-01-01\",\n            min: \"2017-01-01\",\n            max: \"2017-12-31\",\n            onChange: e => {\n              // Change date value\n              var tempDate = e.target.value;\n              this.date = tempDate.substring(0, 4) + tempDate.substring(5, 7) + tempDate.substring(8, 10);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.loadDate();\n            },\n            children: \"Search Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), this.list]\n        }, \"received\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this);\n        this.setState({\n          received: true\n        });\n      } else {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n\n}","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","line","App","constructor","props","stationID","currentStation","date","data","list","PRCP","SNOW","TMAX","TMIN","main","e","target","value","searchStation","loadDate","tempData","forEach","split","push","map","get","params","then","res","parseInt","tempDate","substring","setState","received","window","alert","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport line from './Components/line'\n\nexport default class App extends Component {\n\n  constructor (props)\n  {\n    super(props)\n\n    this.stationID = \"\";\n    this.currentStation = \"\";\n    this.date = \"20170101\";\n    this.data = null;\n\n    this.list = null; // Individual date data\n    // Core elements provided by NOAA (-snowdepth)\n    this.PRCP = 0; // Total precipitation (mm/10)\n    this.SNOW = 0; // Total snowfall (mm)\n    this.TMAX = null; // Highest temperature\n    this.TMIN = null; // Lowests temperature\n\n    this.main = (\n      <div className=\"App\" key={\"search\"}>\n        <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n        <button onClick={() => this.searchStation()}>Search</button>\n      </div>\n    );\n  }\n\n  loadDate() {\n    if (this.data !== null)\n    {\n      var tempData = []\n      this.data.forEach((line) => {\n        line = line.split(\",\")\n        if (line[1] === this.date)\n        {\n          tempData.push(line);\n        }\n      });\n      this.list = tempData.map((line) => \n        <line data={line}></line>      \n      );\n    }\n  }\n\n  // searchStation will retrieve the station id from the API and then display that data to the user\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async (res) => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\")\n      {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null;\n\n        // Set current station value\n        this.currentStation = this.stationID;\n        this.data = res.data;\n\n        await this.data.forEach((line) => {\n          line = line.split(\",\");\n          // Find all core values for the station\n          if (line[2] == \"PRCP\")\n          {\n            this.PRCP += parseInt(line[3]);\n          }\n          else if (line[2] == \"SNOW\")\n          {\n            this.SNOW += parseInt(line[3]);\n          }\n          else if (line[2] == \"TMAX\")\n          {\n            if (this.TMAX == null)\n            {\n              this.TMAX = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) > this.TMAX)\n            {\n              this.TMAX = parseInt(line[3])\n            }\n          }\n          else if (line[2] == \"TMIN\")\n          {\n            if (this.TMIN == null)\n            {\n              this.TMIN = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) < this.TMIN)\n            {\n              this.TMIN = parseInt(line[3])\n            }\n          }\n        }); \n\n        // Change the body of the page\n        this.main = (\n          <div className=\"App\" key={\"received\"}>\n            <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n            <button onClick={() => this.searchStation()}>Search New Station</button>\n            <h3>Station {this.currentStation}</h3>\n            <p>Highest Temperature: {this.TMAX}</p>\n            <p>Lowest Temperature: {this.TMIN}</p>\n            <p>Total precipitation: {this.PRCP}</p>\n            <p>Total Snowfall: {this.SNOW}</p>\n            <input type=\"date\" defaultValue=\"2017-01-01\" min=\"2017-01-01\" max=\"2017-12-31\" onChange={(e) => {\n              // Change date value\n              var tempDate = e.target.value;\n              this.date = tempDate.substring(0, 4) + tempDate.substring(5, 7) + tempDate.substring(8, 10);\n            }}></input>\n            <button onClick={() => {this.loadDate()}}>Search Date</button>\n            {this.list}\n          </div>\n        );\n        this.setState({received: true})\n      }\n      else\n      {\n        window.alert(\"No station was found with this ID\")\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n}"]},"metadata":{},"sourceType":"module"}