{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = '';\nvar date = '';\nvar count = 0; // Core elements provided by NOAA (-snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nvar button = null;\n\nvar body = /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"App\",\n  children: /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"date\",\n    min: \"2017-01-01\",\n    max: \"2017-12-31\",\n    defaultValue: \"2017-01-01\",\n    onChange: e => {\n      date = e.target.value.substring(0, 4) + e.target.value.substring(5, 7) + e.target.value.substring(8, 10);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)\n}, count, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this); // searchStation will retrieve the station id from the API and then display that data to the user\n\n\nfunction searchStation(state, setState) {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID,\n      date: date\n    }\n  }).then(async res => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\") {\n      await res.data.forEach(line => {\n        line = line.split(\",\"); // Find all core values for the station\n\n        if (line[2] == \"PRCP\") {\n          PRCP += parseInt(line[3]);\n        } else if (line[2] == \"SNOW\") {\n          SNOW += parseInt(line[3]);\n        } else if (line[2] == \"TMAX\") {\n          if (TMAX == null) {\n            TMAX = parseInt(line[3]);\n          } else if (parseInt(line[3]) > TMAX) {\n            TMAX = parseInt(line[3]);\n          }\n        } else if (line[2] == \"TMIN\") {\n          if (TMIN == null) {\n            TMIN = parseInt(line[3]);\n          } else if (parseInt(line[3]) < TMIN) {\n            TMIN = parseInt(line[3]);\n          }\n        }\n      }); // Change the body of the page\n\n      body = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Highest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lowest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, state.state + \"load\", true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n      setState({\n        state: state + 1\n      });\n    } else {\n      window.alert(\"No station was found with this ID\");\n    }\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState({\n    state: 0\n  });\n  count++;\n\n  if (button === null) {\n    button = /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => searchStation(state, setState),\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n    body = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          stationID = e.target.value;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), button]\n    }, -1, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n  return body;\n}\n\n_s(App, \"fdQbBtReILzzLHu7iHtvbUkvuEc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","useState","axios","stationID","date","count","PRCP","SNOW","TMAX","TMIN","button","body","e","target","value","substring","searchStation","state","setState","get","params","then","res","data","forEach","line","split","parseInt","window","alert","App"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,KAAK,GAAG,CAAZ,C,CAEA;;AACA,IAAIC,IAAI,GAAG,CAAX,C,CAAc;;AACd,IAAIC,IAAI,GAAG,CAAX,C,CAAc;;AACd,IAAIC,IAAI,GAAG,IAAX,C,CAAiB;;AACjB,IAAIC,IAAI,GAAG,IAAX,C,CAAiB;;AAEjB,IAAIC,MAAM,GAAG,IAAb;;AAEA,IAAIC,IAAI,gBACN;AAAK,EAAA,SAAS,EAAC,KAAf;AAAA,yBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAC,YAAvB;AAAoC,IAAA,GAAG,EAAC,YAAxC;AAAqD,IAAA,YAAY,EAAC,YAAlE;AAA+E,IAAA,QAAQ,EAAGC,CAAD,IAAO;AAACR,MAAAA,IAAI,GAAGQ,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,IAAiCH,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,CAAjC,GAAkEH,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,SAAf,CAAyB,CAAzB,EAA4B,EAA5B,CAAzE;AAAyG;AAA1M;AAAA;AAAA;AAAA;AAAA;AADF,GAA0BV,KAA1B;AAAA;AAAA;AAAA;AAAA,QADF,C,CAMA;;;AACA,SAASW,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AACtChB,EAAAA,KAAK,CAACiB,GAAN,CAAU,qCAAV,EAAiD;AAC/CC,IAAAA,MAAM,EAAE;AACNjB,MAAAA,SAAS,EAAEA,SADL;AAENC,MAAAA,IAAI,EAAEA;AAFA;AADuC,GAAjD,EAKGiB,IALH,CAKQ,MAAOC,GAAP,IAAe;AACrB;AACA,QAAIA,GAAG,CAACC,IAAJ,KAAa,oBAAjB,EACA;AACE,YAAMD,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAkBC,IAAD,IAAU;AAC/BA,QAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,GAAX,CAAP,CAD+B,CAE/B;;AACA,YAAID,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACA;AACEnB,UAAAA,IAAI,IAAIqB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAhB;AACD,SAHD,MAIK,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACElB,UAAAA,IAAI,IAAIoB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAhB;AACD,SAHI,MAIA,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACE,cAAIjB,IAAI,IAAI,IAAZ,EACA;AACEA,YAAAA,IAAI,GAAGmB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD,WAHD,MAIK,IAAIE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoBjB,IAAxB,EACL;AACEA,YAAAA,IAAI,GAAGmB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD;AACF,SAVI,MAWA,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACE,cAAIhB,IAAI,IAAI,IAAZ,EACA;AACEA,YAAAA,IAAI,GAAGkB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD,WAHD,MAIK,IAAIE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoBhB,IAAxB,EACL;AACEA,YAAAA,IAAI,GAAGkB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD;AACF;AACF,OAjCK,CAAN,CADF,CAmCE;;AACAd,MAAAA,IAAI,gBACF;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUM,KAAK,CAACA,KAAN,GAAc,MAAxB;AAAA;AAAA;AAAA;AAAA,cADF;AAMAC,MAAAA,QAAQ,CAAC;AACPD,QAAAA,KAAK,EAAEA,KAAK,GAAG;AADR,OAAD,CAAR;AAGD,KA9CD,MAgDA;AACEW,MAAAA,MAAM,CAACC,KAAP,CAAa,mCAAb;AACD;AACF,GA1DD;AA2DD;;AAED,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACb,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC;AAACgB,IAAAA,KAAK,EAAE;AAAR,GAAD,CAAlC;AACAZ,EAAAA,KAAK;;AAEL,MAAIK,MAAM,KAAK,IAAf,EACA;AACEA,IAAAA,MAAM,gBACJ;AAAQ,MAAA,OAAO,EAAE,MAAMM,aAAa,CAACC,KAAD,EAAQC,QAAR,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAIAP,IAAAA,IAAI,gBACF;AAAA,8BACE;AAAO,QAAA,QAAQ,EAAGC,CAAD,IAAO;AAACT,UAAAA,SAAS,GAAGS,CAAC,CAACC,MAAF,CAASC,KAArB;AAA2B;AAApD;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,MAFH;AAAA,OAAU,CAAC,CAAX;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAED,SAAOC,IAAP;AACD;;GApBQmB,G;;KAAAA,G;AAsBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\nvar date = '';\nvar count = 0;\n\n// Core elements provided by NOAA (-snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nvar button = null;\n\nvar body = (\n  <div className=\"App\" key={count}>\n    <input type=\"date\" min=\"2017-01-01\" max=\"2017-12-31\" defaultValue=\"2017-01-01\" onChange={(e) => {date = e.target.value.substring(0, 4) + e.target.value.substring(5, 7) + e.target.value.substring(8, 10)}}></input>\n  </div>\n);\n\n// searchStation will retrieve the station id from the API and then display that data to the user\nfunction searchStation(state, setState) {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID,\n      date: date\n    }\n  }).then(async (res) => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\")\n    {\n      await res.data.forEach((line) => {\n        line = line.split(\",\");\n        // Find all core values for the station\n        if (line[2] == \"PRCP\")\n        {\n          PRCP += parseInt(line[3]);\n        }\n        else if (line[2] == \"SNOW\")\n        {\n          SNOW += parseInt(line[3]);\n        }\n        else if (line[2] == \"TMAX\")\n        {\n          if (TMAX == null)\n          {\n            TMAX = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) > TMAX)\n          {\n            TMAX = parseInt(line[3])\n          }\n        }\n        else if (line[2] == \"TMIN\")\n        {\n          if (TMIN == null)\n          {\n            TMIN = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) < TMIN)\n          {\n            TMIN = parseInt(line[3])\n          }\n        }\n      }); \n      // Change the body of the page\n      body = (\n        <div key={state.state + \"load\"}>\n          <p>Highest Temperature:</p>\n          <p>Lowest Temperature:</p>\n        </div>\n      );\n      setState({\n        state: state + 1\n      });\n    }\n    else\n    {\n      window.alert(\"No station was found with this ID\")\n    }\n  });\n}\n\nfunction App() {\n\n  const [state, setState] = useState({state: 0});\n  count++;\n\n  if (button === null)\n  {\n    button = (\n      <button onClick={() => searchStation(state, setState)}>Search</button>\n    );\n    \n    body = (\n      <div key={-1}>\n        <input onChange={(e) => {stationID = e.target.value}}></input>\n        {button}\n      </div>\n    );\n  }\n\n  return body;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}