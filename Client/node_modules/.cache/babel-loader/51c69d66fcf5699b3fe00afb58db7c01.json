{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = '';\nvar count = 0; // Core elements provided by NOAA (-snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\nexport class body extends components {\n  constructor(props) {\n    this.received = props.received;\n    this.main = null;\n\n    if (this.received === true) {\n      this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Highest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lowest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, received, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this);\n    } else {\n      this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            stationID = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            searchStation();\n            received = true;\n            this.setState({\n              received: received\n            });\n          },\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, count, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  render() {\n    return this.main;\n  }\n\n} // searchStation will retrieve the station id from the API and then display that data to the user\n\nfunction searchStation() {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID\n    }\n  }).then(async res => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\") {\n      await res.data.forEach(line => {\n        line = line.split(\",\"); // Find all core values for the station\n\n        if (line[2] == \"PRCP\") {\n          PRCP += parseInt(line[3]);\n        } else if (line[2] == \"SNOW\") {\n          SNOW += parseInt(line[3]);\n        } else if (line[2] == \"TMAX\") {\n          if (TMAX == null) {\n            TMAX = parseInt(line[3]);\n          } else if (parseInt(line[3]) > TMAX) {\n            TMAX = parseInt(line[3]);\n          }\n        } else if (line[2] == \"TMIN\") {\n          if (TMIN == null) {\n            TMIN = parseInt(line[3]);\n          } else if (parseInt(line[3]) < TMIN) {\n            TMIN = parseInt(line[3]);\n          }\n        }\n      }); // Change the body of the page\n    } else {\n      window.alert(\"No station was found with this ID\");\n    }\n  });\n}\n\nfunction App() {\n  // SOMETHING ABOUT RUNNING THIS IS MAKING IT NOT UPDATE\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","stationID","count","PRCP","SNOW","TMAX","TMIN","received","body","components","constructor","props","main","e","target","value","searchStation","setState","render","get","params","then","res","data","forEach","line","split","parseInt","window","alert","App"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\nvar count = 0;\n\n// Core elements provided by NOAA (-snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\n\nexport class body extends components {\n\n  constructor (props)\n  {\n    this.received = props.received;\n    this.main = null;\n    if (this.received === true)\n    {      \n      this.main = (\n        <div className=\"App\" key={received}>\n          <p>Highest Temperature:</p>\n          <p>Lowest Temperature:</p>\n        </div>\n      );\n    }\n    else\n    {\n      this.main = (\n        <div className=\"App\" key={count}>\n          <input onChange={(e) => {stationID = e.target.value}}></input>\n          <button onClick={() => {searchStation(); received = true; this.setState({received: received})}}>Search</button>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return this.main;\n  }\n}\n\n// searchStation will retrieve the station id from the API and then display that data to the user\nfunction searchStation() {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID\n    }\n  }).then(async (res) => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\")\n    {\n      await res.data.forEach((line) => {\n        line = line.split(\",\");\n        // Find all core values for the station\n        if (line[2] == \"PRCP\")\n        {\n          PRCP += parseInt(line[3]);\n        }\n        else if (line[2] == \"SNOW\")\n        {\n          SNOW += parseInt(line[3]);\n        }\n        else if (line[2] == \"TMAX\")\n        {\n          if (TMAX == null)\n          {\n            TMAX = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) > TMAX)\n          {\n            TMAX = parseInt(line[3])\n          }\n        }\n        else if (line[2] == \"TMIN\")\n        {\n          if (TMIN == null)\n          {\n            TMIN = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) < TMIN)\n          {\n            TMIN = parseInt(line[3])\n          }\n        }\n      }); \n      // Change the body of the page\n\n    }\n    else\n    {\n      window.alert(\"No station was found with this ID\")\n    }\n  });\n}\n\nfunction App() {\n\n  // SOMETHING ABOUT RUNNING THIS IS MAKING IT NOT UPDATE\n\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}