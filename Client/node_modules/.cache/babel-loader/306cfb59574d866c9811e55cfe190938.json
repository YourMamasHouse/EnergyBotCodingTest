{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.stationID = '';\n    this.list = null; // Individual date data\n    // Core elements provided by NOAA (-snowdepth)\n\n    this.PRCP = 0; // Total precipitation (mm/10)\n\n    this.SNOW = 0; // Total snowfall (mm)\n\n    this.TMAX = null; // Highest temperature\n\n    this.TMIN = null; // Lowests temperature\n\n    this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          this.stationID = e.target.value;\n        },\n        placeholder: \"Station ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.searchStation(),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, \"search\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  } // searchStation will retrieve the station id from the API and then display that data to the user\n\n\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async res => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\") {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null;\n        await res.data.forEach(line => {\n          line = line.split(\",\"); // Find all core values for the station\n\n          if (line[2] == \"PRCP\") {\n            this.PRCP += parseInt(line[3]);\n          } else if (line[2] == \"SNOW\") {\n            this.SNOW += parseInt(line[3]);\n          } else if (line[2] == \"TMAX\") {\n            if (this.TMAX == null) {\n              this.TMAX = parseInt(line[3]);\n            } else if (parseInt(line[3]) > this.TMAX) {\n              this.TMAX = parseInt(line[3]);\n            }\n          } else if (line[2] == \"TMIN\") {\n            if (this.TMIN == null) {\n              this.TMIN = parseInt(line[3]);\n            } else if (parseInt(line[3]) < this.TMIN) {\n              this.TMIN = parseInt(line[3]);\n            }\n          }\n        }); // Change the body of the page\n\n        this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: e => {\n              this.stationID = e.target.value;\n            },\n            placeholder: \"Station ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.searchStation(),\n            children: \"Search New Station\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Highest Temperature: \", this.TMAX]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Lowest Temperature: \", this.TMIN]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total precipitation: \", this.PRCP]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Snowfall: \", this.SNOW]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            defaultValue: \"2017-01-01\",\n            min: \"2017-01-01\",\n            max: \"2017-12-31\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Search Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, \"received\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this);\n        this.setState({\n          received: true\n        });\n      } else {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n\n}","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","App","constructor","props","stationID","list","PRCP","SNOW","TMAX","TMIN","main","e","target","value","searchStation","get","params","then","res","data","forEach","line","split","parseInt","setState","received","window","alert","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nexport default class App extends Component {\n\n  constructor (props)\n  {\n    super(props)\n\n    this.stationID = '';\n\n    this.list = null; // Individual date data\n    // Core elements provided by NOAA (-snowdepth)\n    this.PRCP = 0; // Total precipitation (mm/10)\n    this.SNOW = 0; // Total snowfall (mm)\n    this.TMAX = null; // Highest temperature\n    this.TMIN = null; // Lowests temperature\n\n    this.main = (\n      <div className=\"App\" key={\"search\"}>\n        <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n        <button onClick={() => this.searchStation()}>Search</button>\n      </div>\n    );\n  }\n\n  // searchStation will retrieve the station id from the API and then display that data to the user\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async (res) => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\")\n      {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null;\n        \n        await res.data.forEach((line) => {\n          line = line.split(\",\");\n          // Find all core values for the station\n          if (line[2] == \"PRCP\")\n          {\n            this.PRCP += parseInt(line[3]);\n          }\n          else if (line[2] == \"SNOW\")\n          {\n            this.SNOW += parseInt(line[3]);\n          }\n          else if (line[2] == \"TMAX\")\n          {\n            if (this.TMAX == null)\n            {\n              this.TMAX = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) > this.TMAX)\n            {\n              this.TMAX = parseInt(line[3])\n            }\n          }\n          else if (line[2] == \"TMIN\")\n          {\n            if (this.TMIN == null)\n            {\n              this.TMIN = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) < this.TMIN)\n            {\n              this.TMIN = parseInt(line[3])\n            }\n          }\n        }); \n        // Change the body of the page\n        this.main = (\n          <div className=\"App\" key={\"received\"}>\n            <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n            <button onClick={() => this.searchStation()}>Search New Station</button>\n            <p>Highest Temperature: {this.TMAX}</p>\n            <p>Lowest Temperature: {this.TMIN}</p>\n            <p>Total precipitation: {this.PRCP}</p>\n            <p>Total Snowfall: {this.SNOW}</p>\n            <input type=\"date\" defaultValue=\"2017-01-01\" min=\"2017-01-01\" max=\"2017-12-31\"></input>\n            <button>Search Date</button>\n          </div>\n        );\n        this.setState({received: true})\n      }\n      else\n      {\n        window.alert(\"No station was found with this ID\")\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n}"]},"metadata":{},"sourceType":"module"}