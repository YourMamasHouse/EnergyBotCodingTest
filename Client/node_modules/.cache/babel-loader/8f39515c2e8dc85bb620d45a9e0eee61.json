{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = '';\nvar date = ''; // Core elements provided by NOAA (less snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nvar body = /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(\"input\", {\n    onChange: e => {\n      stationID = e.target.value;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 15,\n  columnNumber: 3\n}, this); // searchStation will retrieve the station id from the API and then display that data to the user\n\n\nfunction searchStation(state, setState) {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID,\n      date: date\n    }\n  }).then(res => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\") {\n      res.data.forEach(line => {\n        line = line.split(\",\"); // Find all core values for the station\n\n        if (line[2] == \"PRCP\") {\n          PRCP += parseInt(line[3]);\n        } else if (line[2] == \"SNOW\") {\n          SNOW += parseInt(line[3]);\n        } else if (line[2] == \"TMAX\") {\n          if (TMAX == null) {\n            TMAX = parseInt(line[3]);\n          } else if (parseInt(line[3]) > TMAX) {\n            TMAX = parseInt(line[3]);\n          }\n        } else if (line[2] == \"TMIN\") {\n          if (TMIN == null) {\n            TMIN = parseInt(line[3]);\n          } else if (parseInt(line[3]) < TMIN) {\n            TMIN = parseInt(line[3]);\n          }\n        }\n      }); // Change the body of the page\n\n      body = /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Highest Temperature: \", TMAX]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Lowest Temperature: \", TMIN]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n      setState({\n        state: state += 1\n      });\n      console.log(res.data);\n    } else {\n      window.alert(\"No station was found with this ID\");\n    }\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState({\n    state: 0\n  });\n  button = /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => searchStation(state, setState),\n    children: \"Search\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"date\",\n      min: \"2017-01-01\",\n      max: \"2017-12-31\",\n      defaultvalue: \"2017-01-01\",\n      onChange: e => {\n        date = e.target.value.substring(0, 4) + e.target.value.substring(5, 7) + e.target.value.substring(8, 10);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), body]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fdQbBtReILzzLHu7iHtvbUkvuEc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","useState","axios","stationID","date","PRCP","SNOW","TMAX","TMIN","body","e","target","value","searchStation","state","setState","get","params","then","res","data","forEach","line","split","parseInt","console","log","window","alert","App","button","substring"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\nvar date = '';\n\n// Core elements provided by NOAA (less snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nvar body = (\n  <div>\n    <input onChange={(e) => {stationID = e.target.value}}></input>\n\n  </div>\n);\n\n// searchStation will retrieve the station id from the API and then display that data to the user\nfunction searchStation(state, setState) {\n  axios.get(\"http://localhost:9999/searchstation\", {\n    params: {\n      stationID: stationID,\n      date: date\n    }\n  }).then((res) => {\n    // Display new data if the station is valid\n    if (res.data !== \"INVALID STATION ID\")\n    {\n      res.data.forEach((line) => {\n        line = line.split(\",\");\n        // Find all core values for the station\n        if (line[2] == \"PRCP\")\n        {\n          PRCP += parseInt(line[3]);\n        }\n        else if (line[2] == \"SNOW\")\n        {\n          SNOW += parseInt(line[3]);\n        }\n        else if (line[2] == \"TMAX\")\n        {\n          if (TMAX == null)\n          {\n            TMAX = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) > TMAX)\n          {\n            TMAX = parseInt(line[3])\n          }\n        }\n        else if (line[2] == \"TMIN\")\n        {\n          if (TMIN == null)\n          {\n            TMIN = parseInt(line[3]);\n          }\n          else if (parseInt(line[3]) < TMIN)\n          {\n            TMIN = parseInt(line[3])\n          }\n        }\n      });\n      // Change the body of the page\n      body = (\n        <div>\n          <p>Highest Temperature: {TMAX}</p>\n          <p>Lowest Temperature: {TMIN}</p>\n        </div>\n      );\n      setState({\n        state: state += 1\n      })\n      console.log(res.data);\n    }\n    else\n    {\n      window.alert(\"No station was found with this ID\")\n    }\n  });\n}\n\nfunction App() {\n\n  const [state, setState] = useState({state: 0});\n\n  button = (\n    <button onClick={() => searchStation(state, setState)}>Search</button>\n  );\n\n  return (\n    <div className=\"App\">\n      <input type=\"date\" min=\"2017-01-01\" max=\"2017-12-31\" defaultvalue=\"2017-01-01\" onChange={(e) => {date = e.target.value.substring(0, 4) + e.target.value.substring(5, 7) + e.target.value.substring(8, 10)}}></input>\n      {body}\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}