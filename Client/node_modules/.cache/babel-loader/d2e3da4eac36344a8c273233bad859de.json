{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = '';\nvar count = 0; // Core elements provided by NOAA (-snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.received = props.received;\n    this.main = null;\n    console.log(this.received);\n\n    if (this.received === true) {\n      console.log(\"true\");\n      this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Highest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lowest Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, received, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this);\n    } else {\n      this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            stationID = e.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            searchStation();\n            received = true;\n            this.setState({\n              received: received\n            });\n            this.received = true;\n          },\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, count, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this);\n    }\n  } // searchStation will retrieve the station id from the API and then display that data to the user\n\n\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: stationID\n      }\n    }).then(async res => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\") {\n        await res.data.forEach(line => {\n          line = line.split(\",\"); // Find all core values for the station\n\n          if (line[2] == \"PRCP\") {\n            PRCP += parseInt(line[3]);\n          } else if (line[2] == \"SNOW\") {\n            SNOW += parseInt(line[3]);\n          } else if (line[2] == \"TMAX\") {\n            if (TMAX == null) {\n              TMAX = parseInt(line[3]);\n            } else if (parseInt(line[3]) > TMAX) {\n              TMAX = parseInt(line[3]);\n            }\n          } else if (line[2] == \"TMIN\") {\n            if (TMIN == null) {\n              TMIN = parseInt(line[3]);\n            } else if (parseInt(line[3]) < TMIN) {\n              TMIN = parseInt(line[3]);\n            }\n          }\n        }); // Change the body of the page\n      } else {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n\n}","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","stationID","count","PRCP","SNOW","TMAX","TMIN","received","App","constructor","props","main","console","log","e","target","value","searchStation","setState","get","params","then","res","data","forEach","line","split","parseInt","window","alert","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,KAAK,GAAG,CAAZ,C,CAEA;;AACA,IAAIC,IAAI,GAAG,CAAX,C,CAAc;;AACd,IAAIC,IAAI,GAAG,CAAX,C,CAAc;;AACd,IAAIC,IAAI,GAAG,IAAX,C,CAAiB;;AACjB,IAAIC,IAAI,GAAG,IAAX,C,CAAiB;;AAEjB,IAAIC,QAAQ,GAAG,KAAf;AAEA,eAAe,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAEzCU,EAAAA,WAAW,CAAEC,KAAF,EACX;AACE,UAAMA,KAAN;AACA,SAAKH,QAAL,GAAgBG,KAAK,CAACH,QAAtB;AACA,SAAKI,IAAL,GAAY,IAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,QAAjB;;AACA,QAAI,KAAKA,QAAL,KAAkB,IAAtB,EACA;AACEK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,WAAKF,IAAL,gBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAA0BJ,QAA1B;AAAA;AAAA;AAAA;AAAA,cADF;AAMD,KATD,MAWA;AACE,WAAKI,IAAL,gBACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAO,UAAA,QAAQ,EAAGG,CAAD,IAAO;AAACb,YAAAA,SAAS,GAAGa,CAAC,CAACC,MAAF,CAASC,KAArB;AAA2B;AAApD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAE,MAAM;AAACC,YAAAA,aAAa;AAAIV,YAAAA,QAAQ,GAAG,IAAX;AAAiB,iBAAKW,QAAL,CAAc;AAACX,cAAAA,QAAQ,EAAEA;AAAX,aAAd;AAAqC,iBAAKA,QAAL,GAAgB,IAAhB;AAAsB,WAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAA0BL,KAA1B;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;AACF,GA3BwC,CA6BzC;;;AACAe,EAAAA,aAAa,GAAG;AACdjB,IAAAA,KAAK,CAACmB,GAAN,CAAU,qCAAV,EAAiD;AAC/CC,MAAAA,MAAM,EAAE;AACNnB,QAAAA,SAAS,EAAEA;AADL;AADuC,KAAjD,EAIGoB,IAJH,CAIQ,MAAOC,GAAP,IAAe;AACrB;AACA,UAAIA,GAAG,CAACC,IAAJ,KAAa,oBAAjB,EACA;AACE,cAAMD,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAkBC,IAAD,IAAU;AAC/BA,UAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,GAAX,CAAP,CAD+B,CAE/B;;AACA,cAAID,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACA;AACEtB,YAAAA,IAAI,IAAIwB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAhB;AACD,WAHD,MAIK,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACErB,YAAAA,IAAI,IAAIuB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAhB;AACD,WAHI,MAIA,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACE,gBAAIpB,IAAI,IAAI,IAAZ,EACA;AACEA,cAAAA,IAAI,GAAGsB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD,aAHD,MAIK,IAAIE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoBpB,IAAxB,EACL;AACEA,cAAAA,IAAI,GAAGsB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD;AACF,WAVI,MAWA,IAAIA,IAAI,CAAC,CAAD,CAAJ,IAAW,MAAf,EACL;AACE,gBAAInB,IAAI,IAAI,IAAZ,EACA;AACEA,cAAAA,IAAI,GAAGqB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD,aAHD,MAIK,IAAIE,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoBnB,IAAxB,EACL;AACEA,cAAAA,IAAI,GAAGqB,QAAQ,CAACF,IAAI,CAAC,CAAD,CAAL,CAAf;AACD;AACF;AACF,SAjCK,CAAN,CADF,CAmCE;AAED,OAtCD,MAwCA;AACEG,QAAAA,MAAM,CAACC,KAAP,CAAa,mCAAb;AACD;AACF,KAjDD;AAkDD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKnB,IAAZ;AACD;;AArFwC","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\nvar count = 0;\n\n// Core elements provided by NOAA (-snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nvar received = false;\n\nexport default class App extends Component {\n\n  constructor (props)\n  {\n    super(props)\n    this.received = props.received;\n    this.main = null;\n    console.log(this.received)\n    if (this.received === true)\n    {      \n      console.log(\"true\")\n      this.main = (\n        <div className=\"App\" key={received}>\n          <p>Highest Temperature:</p>\n          <p>Lowest Temperature:</p>\n        </div>\n      );\n    }\n    else\n    {      \n      this.main = (\n        <div className=\"App\" key={count}>\n          <input onChange={(e) => {stationID = e.target.value}}></input>\n          <button onClick={() => {searchStation(); received = true; this.setState({received: received}); this.received = true;}}>Search</button>\n        </div>\n      );\n    }\n  }\n\n  // searchStation will retrieve the station id from the API and then display that data to the user\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: stationID\n      }\n    }).then(async (res) => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\")\n      {\n        await res.data.forEach((line) => {\n          line = line.split(\",\");\n          // Find all core values for the station\n          if (line[2] == \"PRCP\")\n          {\n            PRCP += parseInt(line[3]);\n          }\n          else if (line[2] == \"SNOW\")\n          {\n            SNOW += parseInt(line[3]);\n          }\n          else if (line[2] == \"TMAX\")\n          {\n            if (TMAX == null)\n            {\n              TMAX = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) > TMAX)\n            {\n              TMAX = parseInt(line[3])\n            }\n          }\n          else if (line[2] == \"TMIN\")\n          {\n            if (TMIN == null)\n            {\n              TMIN = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) < TMIN)\n            {\n              TMIN = parseInt(line[3])\n            }\n          }\n        }); \n        // Change the body of the page\n\n      }\n      else\n      {\n        window.alert(\"No station was found with this ID\")\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n}"]},"metadata":{},"sourceType":"module"}