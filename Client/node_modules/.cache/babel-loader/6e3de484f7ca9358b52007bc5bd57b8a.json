{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stationID = ''; // Core elements provided by NOAA (-snowdepth)\n\nvar PRCP = 0; // Total precipitation (mm/10)\n\nvar SNOW = 0; // Total snowfall (mm)\n\nvar TMAX = null; // Highest temperature\n\nvar TMIN = null; // Lowests temperature\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => {\n          stationID = e.target.value;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.searchStation(),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, \"search\", true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  } // searchStation will retrieve the station id from the API and then display that data to the user\n\n\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: stationID\n      }\n    }).then(async res => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\") {\n        await res.data.forEach(line => {\n          line = line.split(\",\"); // Find all core values for the station\n\n          if (line[2] == \"PRCP\") {\n            PRCP += parseInt(line[3]);\n          } else if (line[2] == \"SNOW\") {\n            SNOW += parseInt(line[3]);\n          } else if (line[2] == \"TMAX\") {\n            if (TMAX == null) {\n              TMAX = parseInt(line[3]);\n            } else if (parseInt(line[3]) > TMAX) {\n              TMAX = parseInt(line[3]);\n            }\n          } else if (line[2] == \"TMIN\") {\n            if (TMIN == null) {\n              TMIN = parseInt(line[3]);\n            } else if (parseInt(line[3]) < TMIN) {\n              TMIN = parseInt(line[3]);\n            }\n          }\n        }); // Change the body of the page\n\n        this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Highest Temperature: \", TMAX]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Lowest Temperature: \", TMIN]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, \"received\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this);\n        this.setState({\n          received: true\n        });\n      } else {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n\n}","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","stationID","PRCP","SNOW","TMAX","TMIN","App","constructor","props","main","e","target","value","searchStation","get","params","then","res","data","forEach","line","split","parseInt","setState","received","window","alert","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\n\nvar stationID = '';\n\n// Core elements provided by NOAA (-snowdepth)\nvar PRCP = 0; // Total precipitation (mm/10)\nvar SNOW = 0; // Total snowfall (mm)\nvar TMAX = null; // Highest temperature\nvar TMIN = null; // Lowests temperature\n\nexport default class App extends Component {\n\n  constructor (props)\n  {\n    super(props)\n\n    this.main = (\n      <div className=\"App\" key={\"search\"}>\n        <input onChange={(e) => {stationID = e.target.value}}></input>\n        <button onClick={() => this.searchStation()}>Search</button>\n      </div>\n    );\n  }\n\n  // searchStation will retrieve the station id from the API and then display that data to the user\n  searchStation() {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: stationID\n      }\n    }).then(async (res) => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\")\n      {\n        await res.data.forEach((line) => {\n          line = line.split(\",\");\n          // Find all core values for the station\n          if (line[2] == \"PRCP\")\n          {\n            PRCP += parseInt(line[3]);\n          }\n          else if (line[2] == \"SNOW\")\n          {\n            SNOW += parseInt(line[3]);\n          }\n          else if (line[2] == \"TMAX\")\n          {\n            if (TMAX == null)\n            {\n              TMAX = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) > TMAX)\n            {\n              TMAX = parseInt(line[3])\n            }\n          }\n          else if (line[2] == \"TMIN\")\n          {\n            if (TMIN == null)\n            {\n              TMIN = parseInt(line[3]);\n            }\n            else if (parseInt(line[3]) < TMIN)\n            {\n              TMIN = parseInt(line[3])\n            }\n          }\n        }); \n        // Change the body of the page\n        this.main = (\n          <div className=\"App\" key={\"received\"}>\n            <p>Highest Temperature: {TMAX}</p>\n            <p>Lowest Temperature: {TMIN}</p>\n          </div>\n        );\n        this.setState({received: true})\n      }\n      else\n      {\n        window.alert(\"No station was found with this ID\")\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n}"]},"metadata":{},"sourceType":"module"}