{"ast":null,"code":"var _jsxFileName = \"F:\\\\Programs\\\\EnergybotTest\\\\client\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Line from './Components/line';\nimport lightning from './Images/lightning.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.stationID = \"\";\n    this.currentStation = \"\";\n    this.date = \"20170101\";\n    this.data = null;\n    this.list = null; // Individual date data\n    // Core elements provided by NOAA (-snowdepth)\n\n    this.PRCP = 0; // Total precipitation (mm/10)\n\n    this.SNOW = 0; // Total snowfall (mm)\n\n    this.TMAX = null; // Highest temperature\n\n    this.TMIN = null; // Lowests temperature\n\n    this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Greeting\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: lightning\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            this.stationID = e.target.value;\n          },\n          placeholder: \"Station ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.searchStation(),\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, \"search\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  loadDate() {\n    if (this.data !== null) {\n      var tempData = [];\n      this.data.forEach(line => {\n        line = line.split(\",\");\n\n        if (line[1] === this.date) {\n          tempData.push(line);\n        }\n      });\n      this.list = tempData.map(line => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: line\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, this.date + line[2], false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this));\n      this.searchStation(this.currentStation);\n      this.setState({\n        station: this.currentStation,\n        date: this.date,\n        received: true\n      });\n    }\n  } // searchStation will retrieve the station id from the API and then display that data to the user\n\n\n  searchStation(stationID) {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async res => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\") {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null; // Reset date specific value list\n\n        if (stationID !== this.currentStation) {\n          this.list = null;\n          this.date = \"20170101\";\n        } // Set current station value\n\n\n        this.currentStation = this.stationID;\n        this.data = res.data;\n        await this.data.forEach(line => {\n          line = line.split(\",\"); // Find all core values for the station\n\n          if (line[2] === \"PRCP\") {\n            this.PRCP += parseFloat(line[3]) / 10;\n          } else if (line[2] === \"SNOW\") {\n            this.SNOW += parseInt(line[3]);\n          } else if (line[2] === \"TMAX\") {\n            if (this.TMAX === null) {\n              this.TMAX = parseFloat(line[3]) / 10;\n            } else if (parseInt(line[3]) / 10 > this.TMAX) {\n              this.TMAX = parseInt(line[3]) / 10;\n            }\n          } else if (line[2] === \"TMIN\") {\n            if (this.TMIN === null) {\n              this.TMIN = parseInt(line[3]) / 10;\n            } else if (parseInt(line[3]) / 10 < this.TMIN) {\n              this.TMIN = parseInt(line[3]) / 10;\n            }\n          }\n        }); // Change the body of the page\n\n        this.main = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Card\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: e => {\n                this.stationID = e.target.value;\n              },\n              placeholder: \"Station ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.searchStation(),\n              children: \"Search New Station\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Station \", this.currentStation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Highest Temperature: \", this.TMAX, \" C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Lowest Temperature: \", this.TMIN, \" C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total precipitation: \", this.PRCP.toFixed(2), \" mm\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Total Snowfall: \", this.SNOW, \" mm\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              defaultValue: this.date.substring(0, 4) + \"-\" + this.date.substring(4, 6) + \"-\" + this.date.substring(6, 8),\n              min: \"2017-01-01\",\n              max: \"2017-12-31\",\n              onChange: e => {\n                // Change date value\n                var tempDate = e.target.value;\n                this.date = tempDate.substring(0, 4) + tempDate.substring(5, 7) + tempDate.substring(8, 10);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.loadDate();\n              },\n              children: \"Search Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.list\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, \"received\" + this.date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this);\n        this.setState({\n          received: true\n        });\n      } else {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n\n}","map":{"version":3,"sources":["F:/Programs/EnergybotTest/client/src/App.js"],"names":["React","Component","axios","Line","lightning","App","constructor","props","stationID","currentStation","date","data","list","PRCP","SNOW","TMAX","TMIN","main","e","target","value","searchStation","loadDate","tempData","forEach","line","split","push","map","setState","station","received","get","params","then","res","parseFloat","parseInt","toFixed","substring","tempDate","window","alert","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Line from './Components/line'\nimport lightning from './Images/lightning.png'\n\nexport default class App extends Component {\n\n  constructor (props)\n  {\n    super(props);\n\n    this.stationID = \"\";\n    this.currentStation = \"\";\n    this.date = \"20170101\";\n    this.data = null;\n    this.list = null; // Individual date data\n\n    // Core elements provided by NOAA (-snowdepth)\n    this.PRCP = 0; // Total precipitation (mm/10)\n    this.SNOW = 0; // Total snowfall (mm)\n    this.TMAX = null; // Highest temperature\n    this.TMIN = null; // Lowests temperature\n\n    this.main = (\n      <div className=\"Greeting\" key={\"search\"}>\n        <div className=\"Card\">\n          <img src={lightning}></img>\n          <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n          <button onClick={() => this.searchStation()}>Search</button>\n        </div>\n      </div>\n    );\n  }\n\n  loadDate() {\n    if (this.data !== null)\n    {\n      var tempData = []\n      this.data.forEach((line) => {\n        line = line.split(\",\")\n        if (line[1] === this.date)\n        {\n          tempData.push(line);\n        }\n      });\n      this.list = tempData.map((line) => \n        <div key={this.date + line[2]}>\n          <Line data={line}></Line>\n        </div>     \n      );\n      this.searchStation(this.currentStation)\n      this.setState({\n        station: this.currentStation,\n        date: this.date,\n        received: true\n      });\n    }\n  }\n\n  // searchStation will retrieve the station id from the API and then display that data to the user\n  searchStation(stationID) {\n    axios.get(\"http://localhost:9999/searchstation\", {\n      params: {\n        stationID: this.stationID\n      }\n    }).then(async (res) => {\n      // Display new data if the station is valid\n      if (res.data !== \"INVALID STATION ID\")\n      {\n        // Reset core values\n        this.PRCP = 0;\n        this.SNOW = 0;\n        this.TMAX = null;\n        this.TMIN = null;\n\n        // Reset date specific value list\n        if (stationID !== this.currentStation)\n        {\n          this.list = null;\n          this.date = \"20170101\";\n        }\n\n        // Set current station value\n        this.currentStation = this.stationID;\n        this.data = res.data;\n\n        await this.data.forEach((line) => {\n          line = line.split(\",\");\n          // Find all core values for the station\n          if (line[2] === \"PRCP\")\n          {\n            this.PRCP += parseFloat(line[3])/10;\n          }\n          else if (line[2] === \"SNOW\")\n          {\n            this.SNOW += parseInt(line[3]);\n          }\n          else if (line[2] === \"TMAX\")\n          {\n            if (this.TMAX === null)\n            {\n              this.TMAX = parseFloat(line[3])/10;\n            }\n            else if (parseInt(line[3])/10 > this.TMAX)\n            {\n              this.TMAX = parseInt(line[3])/10\n            }\n          }\n          else if (line[2] === \"TMIN\")\n          {\n            if (this.TMIN === null)\n            {\n              this.TMIN = parseInt(line[3])/10;\n            }\n            else if (parseInt(line[3])/10 < this.TMIN)\n            {\n              this.TMIN = parseInt(line[3])/10\n            }\n          }\n        }); \n\n        // Change the body of the page\n        this.main = (\n          <div className=\"App\" key={\"received\" + this.date}>\n            <div className=\"Card\">\n              <input onChange={(e) => {this.stationID = e.target.value}} placeholder=\"Station ID\"></input>\n              <button onClick={() => this.searchStation()}>Search New Station</button>\n              <h3>Station {this.currentStation}</h3>\n              <p>Highest Temperature: {this.TMAX} C</p>\n              <p>Lowest Temperature: {this.TMIN} C</p>\n              <p>Total precipitation: {this.PRCP.toFixed(2)} mm</p>\n              <p>Total Snowfall: {this.SNOW} mm</p>\n              <input type=\"date\" defaultValue={this.date.substring(0, 4) + \"-\" + this.date.substring(4, 6) + \"-\" + this.date.substring(6, 8)} min=\"2017-01-01\" max=\"2017-12-31\" onChange={(e) => {\n                // Change date value\n                var tempDate = e.target.value;\n                this.date = tempDate.substring(0, 4) + tempDate.substring(5, 7) + tempDate.substring(8, 10);\n              }}></input>\n              <button onClick={() => {this.loadDate()}}>Search Date</button>\n              <div>\n                {this.list}\n              </div>\n            </div>\n          </div>\n        );\n        this.setState({received: true})\n      }\n      else\n      {\n        window.alert(\"No station was found with this ID\");\n      }\n    });\n  }\n\n  render() {\n    return this.main;\n  }\n}"]},"metadata":{},"sourceType":"module"}